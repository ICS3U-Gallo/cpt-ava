import arcade
import random

WIDTH = 640
HEIGHT = 480
player_x = 100
player_y = 100
player_speed = 10
background_x = 320
background_y = 240
enemy_size = 0.1
player_size = 0.1

fish = arcade.Sprite("images/fish.png", player_size)
background = arcade.Sprite("images/background.png", 1.95)

current_screen = "menu"

button_height = 150
button_width = 75
button_colour = arcade.color.LIGHT_CORAL

button1 = [WIDTH/2, HEIGHT/2, button_height, button_width, button_colour]
button2 = [WIDTH / 2, HEIGHT / 2 - 100, button_height, button_width, button_colour]
button3 = [WIDTH / 2, HEIGHT / 2 + 100, button_height, button_width, button_colour]

highscore = "300"

fish_count = 10

# controls
up_pressed = False
down_pressed = False
right_pressed = False
left_pressed = False

player_list = arcade.SpriteList()
player_list.append(fish)
enemy_list = arcade.SpriteList()
background_list = arcade.SpriteList()

def update(delta_time):
    global player_y, player_x, down_pressed, up_pressed, player_speed, fish

    # TODO: change player_x to fish.center_x, same with y values
    if up_pressed:
        fish.center_y += player_speed
    elif down_pressed:
        fish.center_y -= player_speed
    elif right_pressed:
        fish.center_x += player_speed
    elif left_pressed:
        fish.center_x -= player_speed

    if fish.center_x <= 0:
        fish.center_x = 20
    elif fish.center_x >= WIDTH:
        fish.center_x = 620
    elif fish.center_y <= 0:
        fish.center_y = 50
    elif fish.center_y >= HEIGHT:
        fish.center_y = 460

    if len(enemy_list) < fish_count:
        enemy_multiply = random.randrange(5, 15)
        enemy_size = player_size*enemy_multiply/10
        enemyfish = arcade.Sprite("images/enemyfish.png", enemy_size)
        enemyfish.center_x = random.randrange(0 , WIDTH)
        enemyfish.center_y = random.randrange(50, HEIGHT)
        enemyfish.change_x = random.randrange(-2, 2)
        enemyfish.change_y = random.randrange(-2, 2)
        enemy_list.append(enemyfish)


    # TODO: change the name of fish to enemy_fish
    for enemyfish in enemy_list:
        if enemyfish.left > WIDTH or enemyfish.right < 0 or enemyfish.bottom > HEIGHT or enemyfish.top < 0:
            enemyfish.kill()


    enemy_list.update()

    # if arcade.check_for_collision_with_list(fish)

def on_draw():
    arcade.start_render()
    # Draw in here...
    if current_screen == "menu":
        global button1, button2, button3, fish_count, background, background_x, background_y
        background.center_x = background_x
        background.center_y = background_y
        background_list.append(background)
        background_list.draw()


        arcade.draw_rectangle_filled(button1[0], button1[1], button1[2], button1[3], button1[4])
        arcade.draw_text("Start", WIDTH / 2 - 25, HEIGHT / 2 - 10, arcade.color.BLACK, 18)

        arcade.draw_rectangle_filled(button2[0], button2[1], button2[2], button2[3], button2[4])
        arcade.draw_text("Instructions", WIDTH / 2 - 52, HEIGHT / 2 - 110, arcade.color.BLACK, 18)

        arcade.draw_rectangle_filled(button3[0], button3[1], button3[2], button3[3], button3[4])
        arcade.draw_text("High Score:", WIDTH / 2 - 52, HEIGHT / 2 + 100, arcade.color.BLACK, 18)

        arcade.draw_text(highscore, WIDTH / 2 - 25, HEIGHT / 2 + 70, arcade.color.BLACK, 18)

    elif current_screen == "game":
        arcade.draw_xywh_rectangle_filled(0, 0, 640, 480, arcade.color.SKY_BLUE)

        arcade.draw_xywh_rectangle_filled(0, 0, 640, 50, arcade.color.LIGHT_BROWN)

        arcade.draw_xywh_rectangle_filled(0,HEIGHT - 35, 65, 35, arcade.color.BLACK)

        arcade.draw_text("Menu", 10, 455, arcade.color.GRAY_BLUE, 12)

        player_list.draw()
        enemy_list.draw()

    elif current_screen == "instructions":
        background.center_x = background_x
        background.center_y = background_y
        background_list.append(background)
        background_list.draw()

        arcade.draw_text("Fish Eat Fish", WIDTH/2, HEIGHT - 50, arcade.color.BLACK)

def on_key_press(key, modifiers):
    global up_pressed, down_pressed, right_pressed, left_pressed
    if key == arcade.key.UP:
        up_pressed = True
    if key == arcade.key.DOWN:
        down_pressed = True
    if key == arcade.key.RIGHT:
        right_pressed = True
    if key == arcade.key.LEFT:
        left_pressed = True

def on_key_release(key, modifiers):
    global up_pressed, down_pressed, right_pressed, left_pressed
    if up_pressed:
        up_pressed = False
    if down_pressed:
        down_pressed = False
    if right_pressed:
        right_pressed = False
    if left_pressed:
        left_pressed = False

    pass

def on_mouse_press(x, y, button, modifiers):
    global current_screen, button1, button_width, button_height
    if x > button1[0] - button_width/2 and x < button1[0] + button_width/2 and y > button1[1] - button_height/2 and y < button1[1] + button_height/2:
        current_screen = "game"
        print("hi")
    if x > 0 and x < 65 and y > 445 and y < 460:
        current_screen = "menu"
        print("bye")
    if x > button2[1] - button_width/2 and x < button2[0] + button_width/2 and y > button2[1] - button_height/2 and y < button2[1] + button_height/2:
        current_screen = "instructions"

def setup():
    arcade.open_window(WIDTH, HEIGHT, "My Arcade Game")
    arcade.set_background_color(arcade.color.WHITE)
    arcade.schedule(update, 1/60)

    # Override arcade window methods
    window = arcade.get_window()
    window.on_draw = on_draw
    window.on_key_press = on_key_press
    window.on_key_release = on_key_release
    window.on_mouse_press = on_mouse_press

    arcade.run()



if __name__ == '__main__':
    setup()
